package main

import (
	"blockhain/bech32"
	"fmt"
	"reflect"
	"strings"
)

type item struct {
	address      string
	scriptpubkey []int
}

var validChecksum = []string{
	"A12UEL5L",
	"an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs",
	"abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw",
	"11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j",
	"split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w",
}

var validAddress = []item{
	item{"BC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KV8F3T4",
		[]int{
			0x00, 0x14, 0x75, 0x1e, 0x76, 0xe8, 0x19, 0x91, 0x96, 0xd4, 0x54,
			0x94, 0x1c, 0x45, 0xd1, 0xb3, 0xa3, 0x23, 0xf1, 0x43, 0x3b, 0xd6,
		},
	},
	item{"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7",
		[]int{
			0x00, 0x20, 0x18, 0x63, 0x14, 0x3c, 0x14, 0xc5, 0x16, 0x68, 0x04,
			0xbd, 0x19, 0x20, 0x33, 0x56, 0xda, 0x13, 0x6c, 0x98, 0x56, 0x78,
			0xcd, 0x4d, 0x27, 0xa1, 0xb8, 0xc6, 0x32, 0x96, 0x04, 0x90, 0x32,
			0x62,
		},
	},
	item{"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx",
		[]int{
			0x51, 0x28, 0x75, 0x1e, 0x76, 0xe8, 0x19, 0x91, 0x96, 0xd4, 0x54,
			0x94, 0x1c, 0x45, 0xd1, 0xb3, 0xa3, 0x23, 0xf1, 0x43, 0x3b, 0xd6,
			0x75, 0x1e, 0x76, 0xe8, 0x19, 0x91, 0x96, 0xd4, 0x54, 0x94, 0x1c,
			0x45, 0xd1, 0xb3, 0xa3, 0x23, 0xf1, 0x43, 0x3b, 0xd6,
		},
	},
	item{"BC1SW50QA3JX3S",
		[]int{
			0x60, 0x02, 0x75, 0x1e,
		},
	},
	item{"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj",
		[]int{
			0x52, 0x10, 0x75, 0x1e, 0x76, 0xe8, 0x19, 0x91, 0x96, 0xd4, 0x54,
			0x94, 0x1c, 0x45, 0xd1, 0xb3, 0xa3, 0x23,
		},
	},
	item{"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy",
		[]int{
			0x00, 0x20, 0x00, 0x00, 0x00, 0xc4, 0xa5, 0xca, 0xd4, 0x62, 0x21,
			0xb2, 0xa1, 0x87, 0x90, 0x5e, 0x52, 0x66, 0x36, 0x2b, 0x99, 0xd5,
			0xe9, 0x1c, 0x6c, 0xe2, 0x4d, 0x16, 0x5d, 0xab, 0x93, 0xe8, 0x64,
			0x33,
		},
	},
}

func segwitScriptpubkey(version int, program []int) []int {
	if version != 0 {
		version += 0x50
	}
	return append(append([]int{version}, len(program)), program...)
}

func main() {
	for _, test := range validAddress {
		hrp := "bc"
		fmt.Println("address :", test)
		version, program, err := bech32.SegwitAddrDecode(hrp, test.address)
		if err != nil {
			hrp = "tb"
			version, program, err = bech32.SegwitAddrDecode(hrp, test.address)
		}
		ok := err == nil
		if ok {
			output := segwitScriptpubkey(version, program)
			ok = reflect.DeepEqual(output, test.scriptpubkey)
		}
		if ok {
			recreate, err := bech32.SegwitAddrEncode(hrp, version, program)
			if err == nil {
				ok = recreate == strings.ToLower(test.address)
			}
		}
		if ok {
			fmt.Println("Valid address %v : ok\n", test.address)
		} else {
			fmt.Println("Valid address %v : FAIL\n", test.address)
		}
	}
}
